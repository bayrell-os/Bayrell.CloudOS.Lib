/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Lib;

use Runtime.ORM.ConnectionInterface as Connection;
use Runtime.ORM.CursorInterface as Cursor;
use Runtime.ORM.QueryBuilder;
use Runtime.ORM.Record;
use Runtime.Task.CronTimer;
use Runtime.Task.TaskList;
use Runtime.Task.TaskMethod;
use Bayrell.CloudOS.Lib.Helper;
use Bayrell.CloudOS.Lib.ORM.TopMenu;
use Bayrell.CloudOS.Lib.ORM.User;


@TaskList{}
static class Tasks
{
	
	@CronTimer{ "timer": 15*60*60, "alias": "cloud_os_sync" }
	static async void sync()
	{
		await static::syncTopMenu();
		await static::syncUsers();
	}
	
	
	
	@TaskMethod{}
	static async void syncTopMenu()
	{
		string domain = @.env("CLOUD_PANEL");
		string url = "http://" ~ domain ~ "/api/self/Bayrell.CloudOS.Balancer/default/getTopMenu/"
		Collection res = Helper::send_api(url);
		int time = rtl::time();
		
		if (res)
		{
			for (int i=0; i<res.count(); i++)
			{
				Dict item = res[i];
				await TopMenu::save
				{
					"id": item["id"],
					"name": item["name"],
					"href": item["href"],
					"pos": item["pos"],
					"sync_timestamp": time,
				};
			}
			
			/* Delete old users */
			Connection conn = await QueryBuilder::connect();
			Cursor cursor = await conn.query
			(
				"delete from top_menu where sync_timestamp != :timestamp",
				{
					"timestamp": time,
				}
			);
			await cursor.close();
		}
	}
	
	
	
	@TaskMethod{}
	static async void syncUsers()
	{
		string domain = @.env("CLOUD_PANEL");
		string url = "http://" ~ domain ~ "/api/self/Bayrell.CloudOS.Balancer/default/getUsers/"
		Collection res = Helper::send_api(url);
		int time = rtl::time();
		
		if (res)
		{
			for (int i=0; i<res.count(); i++)
			{
				Dict item = res[i];
				await User::save
				{
					"user_id": item["user_id"],
					"login": item["login"],
					"name": item["name"],
					"banned": item["banned"],
					"is_deleted": item["is_deleted"],
					"sync_timestamp": time,
				};
			}
			
			/* Delete old users */
			Connection conn = await QueryBuilder::connect();
			Cursor cursor = await conn.query
			(
				"update users set is_deleted=1 where sync_timestamp != :timestamp",
				{
					"timestamp": time,
				}
			);
			await cursor.close();
		}
	}
	
}